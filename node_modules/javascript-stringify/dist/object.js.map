{"version":3,"file":"object.js","sourceRoot":"","sources":["../src/object.ts"],"names":[],"mappings":";;AACA,mCAAmC;AACnC,yCAA4C;AAE5C;;GAEG;AACH,SAAgB,cAAc,CAAC,GAAQ,EAAE,MAAc,EAAE,IAAU;IACjE,MAAM,GAAG,GAAG,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC;IAE/B,uDAAuD;IACvD,MAAM,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC;SAC5B,MAAM,CACL,UAAS,MAAM,EAAE,GAAG;QAClB,IAAI,OAAO,GAAG,CAAC,GAAG,CAAC,KAAK,UAAU,EAAE;YAClC,MAAM,MAAM,GAAG,IAAI,yBAAc,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,GAAG,CAAC,CAAC;YAC/D,MAAM,MAAM,GAAG,MAAM,CAAC,SAAS,EAAE,CAAC;YAClC,MAAM,CAAC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,KAAK,MAAM,EAAE,CAAC,CAAC,CAAC;YAC7D,OAAO,MAAM,CAAC;SACf;QAED,MAAM,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,GAAG,CAAC,CAAC;QAEnC,mCAAmC;QACnC,IAAI,MAAM,KAAK,SAAS;YAAE,OAAO,MAAM,CAAC;QAExC,gCAAgC;QAChC,MAAM,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,KAAK,MAAM,EAAE,CAAC,CAAC;QAErD,MAAM,CAAC,IAAI,CACT,GAAG,MAAM,GAAG,gBAAQ,CAAC,GAAG,EAAE,IAAI,CAAC,IAAI,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,GAAG,KAAK,EAAE,CAC/D,CAAC;QAEF,OAAO,MAAM,CAAC;IAChB,CAAC,EACD,EAAc,CACf;SACA,IAAI,CAAC,IAAI,GAAG,EAAE,CAAC,CAAC;IAEnB,sCAAsC;IACtC,IAAI,MAAM,KAAK,EAAE;QAAE,OAAO,IAAI,CAAC;IAE/B,OAAO,IAAI,GAAG,GAAG,MAAM,GAAG,GAAG,GAAG,CAAC;AACnC,CAAC;AApCD,wCAoCC","sourcesContent":["import { Next } from \"./types\";\nimport { quoteKey } from \"./quote\";\nimport { FunctionParser } from \"./function\";\n\n/**\n * Stringify an object of keys and values.\n */\nexport function objectToString(obj: any, indent: string, next: Next) {\n  const eol = indent ? \"\\n\" : \"\";\n\n  // Iterate over object keys and concat string together.\n  const values = Object.keys(obj)\n    .reduce(\n      function(values, key) {\n        if (typeof obj[key] === \"function\") {\n          const parser = new FunctionParser(obj[key], indent, next, key);\n          const result = parser.stringify();\n          values.push(indent + result.split(\"\\n\").join(`\\n${indent}`));\n          return values;\n        }\n\n        const result = next(obj[key], key);\n\n        // Omit `undefined` object entries.\n        if (result === undefined) return values;\n\n        // String format the value data.\n        const value = result.split(\"\\n\").join(`\\n${indent}`);\n\n        values.push(\n          `${indent}${quoteKey(key, next)}:${indent ? \" \" : \"\"}${value}`\n        );\n\n        return values;\n      },\n      [] as string[]\n    )\n    .join(`,${eol}`);\n\n  // Avoid new lines in an empty object.\n  if (values === \"\") return \"{}\";\n\n  return `{${eol}${values}${eol}}`;\n}\n"]}