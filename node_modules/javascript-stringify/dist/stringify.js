"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const quote_1 = require("./quote");
const array_1 = require("./array");
const object_1 = require("./object");
const function_1 = require("./function");
/**
 * Stringify primitive values.
 */
const PRIMITIVE_TYPES = {
    string: quote_1.quoteString,
    number: (value) => (Object.is(value, -0) ? "-0" : String(value)),
    boolean: String,
    symbol: (value, space, next) => {
        const key = Symbol.keyFor(value);
        if (key !== undefined)
            return `Symbol.for(${next(key)})`;
        // ES2018 `Symbol.description`.
        return `Symbol(${next(value.description)})`;
    },
    undefined: String
};
/**
 * Stringify global variable access.
 */
function globalToString(value, space, next) {
    return `Function(${next("return this")})()`;
}
/**
 * Convert JavaScript objects into strings.
 */
const OBJECT_TYPES = {
    "[object Array]": array_1.arrayToString,
    "[object Object]": object_1.objectToString,
    "[object Error]": function (error, space, next) {
        return `new Error(${next(error.message)})`;
    },
    "[object Date]": function (date) {
        return `new Date(${date.getTime()})`;
    },
    "[object String]": function (str, space, next) {
        return `new String(${next(str.toString())})`;
    },
    "[object Number]": function (num) {
        return `new Number(${num})`;
    },
    "[object Boolean]": function (bool) {
        return `new Boolean(${bool})`;
    },
    "[object Set]": function (set, space, next) {
        return `new Set(${next(Array.from(set))})`;
    },
    "[object Map]": function (map, space, next) {
        return `new Map(${next(Array.from(map))})`;
    },
    "[object RegExp]": String,
    "[object Function]": function_1.functionToString,
    "[object GeneratorFunction]": function_1.functionToString,
    "[object AsyncFunction]": function_1.functionToString,
    "[object AsyncGeneratorFunction]": function_1.functionToString,
    "[object global]": globalToString,
    "[object Window]": globalToString
};
/**
 * Stringify a value recursively.
 */
function toString(value, space, next) {
    if (value === null)
        return "null";
    const typeOf = typeof value;
    if (PRIMITIVE_TYPES.hasOwnProperty(typeOf)) {
        return PRIMITIVE_TYPES[typeOf](value, space, next);
    }
    // Handle buffer objects before object types (node < 6 was an object, node >= 6 is a `Uint8Array`).
    if (typeof Buffer === "function" && Buffer.isBuffer(value)) {
        return `new Buffer(${next(value.toString())})`;
    }
    // Use the internal object string to select stringify method.
    const toString = Object.prototype.toString.call(value);
    // Convert objects into strings.
    if (OBJECT_TYPES.hasOwnProperty(toString)) {
        return OBJECT_TYPES[toString](value, space, next);
    }
}
exports.toString = toString;
//# sourceMappingURL=stringify.js.map